#!/usr/bin/env python3
"""
G√©n√©rateur d'ic√¥ne RecyTrack
Cr√©e un logo avec une feuille stylis√©e et le symbole de recyclage
"""

import os
from PIL import Image, ImageDraw, ImageFont
import math

def create_recytrack_logo(size=512):
    """Cr√©e le logo RecyTrack"""
    # Cr√©er une image avec fond transparent
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # Couleurs
    green_primary = '#22C55E'
    green_dark = '#16A34A'
    white = '#FFFFFF'
    
    # Centre et rayon
    center = size // 2
    radius = int(size * 0.45)
    
    # Dessiner le cercle de fond
    draw.ellipse(
        [(center - radius, center - radius), 
         (center + radius, center + radius)],
        fill=green_primary
    )
    
    # Dessiner une feuille stylis√©e
    leaf_points = []
    leaf_center_x = center
    leaf_center_y = center - radius * 0.2
    leaf_width = radius * 0.6
    leaf_height = radius * 0.8
    
    # Contour de la feuille (courbe de B√©zier simplifi√©e)
    steps = 50
    for i in range(steps + 1):
        t = i / steps
        # C√¥t√© gauche
        x = leaf_center_x - leaf_width * (1 - t) * math.sin(t * math.pi)
        y = leaf_center_y - leaf_height * t + leaf_height * 0.3 * math.sin(t * math.pi * 2)
        leaf_points.append((x, y))
    
    for i in range(steps, -1, -1):
        t = i / steps
        # C√¥t√© droit
        x = leaf_center_x + leaf_width * (1 - t) * math.sin(t * math.pi)
        y = leaf_center_y - leaf_height * t + leaf_height * 0.3 * math.sin(t * math.pi * 2)
        leaf_points.append((x, y))
    
    # Dessiner la feuille
    draw.polygon(leaf_points, fill=white)
    
    # Dessiner la nervure centrale
    draw.line(
        [(leaf_center_x, leaf_center_y + leaf_height * 0.4),
         (leaf_center_x, leaf_center_y - leaf_height * 0.8)],
        fill=green_primary,
        width=max(3, size // 100)
    )
    
    # Dessiner les nervures lat√©rales
    for i in range(3):
        offset = (i + 1) * leaf_height * 0.2
        # Nervure gauche
        draw.line(
            [(leaf_center_x, leaf_center_y - offset),
             (leaf_center_x - leaf_width * 0.3, leaf_center_y - offset - leaf_height * 0.1)],
            fill=green_primary,
            width=max(2, size // 150)
        )
        # Nervure droite
        draw.line(
            [(leaf_center_x, leaf_center_y - offset),
             (leaf_center_x + leaf_width * 0.3, leaf_center_y - offset - leaf_height * 0.1)],
            fill=green_primary,
            width=max(2, size // 150)
        )
    
    # Ajouter le symbole de recyclage (3 fl√®ches)
    recycle_center_y = center + radius * 0.4
    arrow_radius = radius * 0.25
    
    for angle in [0, 120, 240]:
        # Calculer la position de chaque fl√®che
        angle_rad = math.radians(angle)
        arrow_x = center + arrow_radius * math.cos(angle_rad)
        arrow_y = recycle_center_y + arrow_radius * math.sin(angle_rad)
        
        # Dessiner une fl√®che courb√©e
        arrow_points = []
        for i in range(20):
            t = i / 19
            curve_angle = angle_rad + t * math.pi / 3
            r = arrow_radius * 0.8 * (1 - t * 0.3)
            x = center + r * math.cos(curve_angle)
            y = recycle_center_y + r * math.sin(curve_angle)
            arrow_points.append((x, y))
        
        # Pointe de fl√®che
        tip_angle = angle_rad + math.pi / 3
        tip_x = center + arrow_radius * 0.6 * math.cos(tip_angle)
        tip_y = recycle_center_y + arrow_radius * 0.6 * math.sin(tip_angle)
        
        # Dessiner la fl√®che
        if len(arrow_points) > 1:
            draw.line(arrow_points, fill=white, width=max(4, size // 80))
            
            # Pointe
            draw.polygon([
                (tip_x, tip_y),
                (tip_x - 8 * math.cos(tip_angle - math.pi/6), 
                 tip_y - 8 * math.sin(tip_angle - math.pi/6)),
                (tip_x - 8 * math.cos(tip_angle + math.pi/6), 
                 tip_y - 8 * math.sin(tip_angle + math.pi/6))
            ], fill=white)
    
    return img

def generate_icons():
    """G√©n√®re toutes les tailles d'ic√¥nes n√©cessaires"""
    sizes = {
        'icon.png': 512,
        'icon@2x.png': 1024,
        'icon-256.png': 256,
        'icon-128.png': 128,
        'icon-64.png': 64,
        'icon-48.png': 48,
        'icon-32.png': 32,
        'icon-16.png': 16
    }
    
    # Cr√©er le dossier icons s'il n'existe pas
    os.makedirs('electron/icons', exist_ok=True)
    os.makedirs('frontend/public', exist_ok=True)
    
    # G√©n√©rer l'ic√¥ne principale
    main_icon = create_recytrack_logo(1024)
    
    # Sauvegarder toutes les tailles
    for filename, size in sizes.items():
        resized = main_icon.resize((size, size), Image.Resampling.LANCZOS)
        resized.save(f'electron/icons/{filename}', 'PNG')
        print(f"‚úÖ Cr√©√©: electron/icons/{filename}")
    
    # Cr√©er aussi favicon pour le web
    favicon_sizes = [16, 32, 192, 512]
    for size in favicon_sizes:
        resized = main_icon.resize((size, size), Image.Resampling.LANCZOS)
        if size == 32:
            resized.save('frontend/public/favicon.ico', 'ICO')
            print(f"‚úÖ Cr√©√©: frontend/public/favicon.ico")
        resized.save(f'frontend/public/logo{size}.png', 'PNG')
        print(f"‚úÖ Cr√©√©: frontend/public/logo{size}.png")
    
    # Cr√©er l'ic√¥ne Windows .ico avec plusieurs r√©solutions
    icon_sizes = [(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)]
    icons = []
    for size in icon_sizes:
        icons.append(main_icon.resize(size, Image.Resampling.LANCZOS))
    
    icons[0].save('electron/icons/icon.ico', format='ICO', sizes=icon_sizes)
    print(f"‚úÖ Cr√©√©: electron/icons/icon.ico (multi-r√©solution)")

if __name__ == '__main__':
    try:
        from PIL import Image, ImageDraw
        generate_icons()
        print("\nüé® Toutes les ic√¥nes ont √©t√© g√©n√©r√©es avec succ√®s !")
    except ImportError:
        print("‚ùå Pillow n'est pas install√©. Installez-le avec : pip install Pillow")
        
        # Cr√©er un fichier d'instructions pour g√©n√©rer l'ic√¥ne
        with open('electron/icons/CREATE_ICON.txt', 'w') as f:
            f.write("""
Pour cr√©er l'ic√¥ne RecyTrack :

1. Installez Python et Pillow :
   pip install Pillow

2. Ex√©cutez :
   python create-icon.py

Ou utilisez un √©diteur d'image pour cr√©er :
- Un logo avec une feuille verte et le symbole de recyclage
- Format : PNG avec fond transparent
- Tailles : 16x16, 32x32, 48x48, 64x64, 128x128, 256x256, 512x512
- Sauvegarder comme icon.ico (multi-r√©solution) dans ce dossier
""")